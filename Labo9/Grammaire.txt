(* Règles basiques *)
digit   ::= 0-9
sign    ::= -
int     ::= [sign]digit{digit}
id      ::= {a-zA-Z0-9_}
func    ::= "f_" + id
var     ::= "v_" + id
bin_op  ::= + | - | * | / | % | ^ | || | &&
comp    ::= == | != | < | <= | > | >=

(* Définition des expressions *)
spl     ::=   def | expr
def     ::=   def func ( [var{, var}] ) = expr
            | def var  = expr
expr    ::=   let var = expr in expr
            | integer
            | var 
            | func ( [expr {, expr}] )
            | ( expr )
            | "-" expr
            | if expr then expr else expr    
            | expr (bin_op | comp) expr 
